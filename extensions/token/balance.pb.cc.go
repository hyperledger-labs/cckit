// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: token/balance.proto

/*
Package token contains
  - chaincode methods names {service_name}Chaincode_{method_name}
  - chaincode interface definition {service_name}Chaincode
  - chaincode gateway definition {service_name}}Gateway
  - chaincode service to cckit router registration func
*/
package token

import (
	context "context"
	_ "embed"

	cckit_gateway "github.com/hyperledger-labs/cckit/gateway"
	cckit_router "github.com/hyperledger-labs/cckit/router"
	cckit_defparam "github.com/hyperledger-labs/cckit/router/param/defparam"
	cckit_sdk "github.com/hyperledger-labs/cckit/sdk"
)

// BalanceServiceChaincode method names
const (

	// BalanceServiceChaincodeMethodPrefix allows to use multiple services with same method names in one chaincode
	BalanceServiceChaincodeMethodPrefix = "BalanceService."

	BalanceServiceChaincode_GetBalance = BalanceServiceChaincodeMethodPrefix + "GetBalance"

	BalanceServiceChaincode_ListBalances = BalanceServiceChaincodeMethodPrefix + "ListBalances"

	BalanceServiceChaincode_Transfer = BalanceServiceChaincodeMethodPrefix + "Transfer"

	BalanceServiceChaincode_TransferBatch = BalanceServiceChaincodeMethodPrefix + "TransferBatch"
)

// BalanceServiceChaincode chaincode methods interface
type BalanceServiceChaincode interface {
	GetBalance(cckit_router.Context, *BalanceId) (*Balance, error)

	ListBalances(cckit_router.Context, *BalanceId) (*Balances, error)

	Transfer(cckit_router.Context, *TransferRequest) (*TransferResponse, error)

	TransferBatch(cckit_router.Context, *TransferBatchRequest) (*TransferBatchResponse, error)
}

// RegisterBalanceServiceChaincode registers service methods as chaincode router handlers
func RegisterBalanceServiceChaincode(r *cckit_router.Group, cc BalanceServiceChaincode) error {

	r.Query(BalanceServiceChaincode_GetBalance,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetBalance(ctx, ctx.Param().(*BalanceId))
		},
		cckit_defparam.Proto(&BalanceId{}))

	r.Query(BalanceServiceChaincode_ListBalances,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.ListBalances(ctx, ctx.Param().(*BalanceId))
		},
		cckit_defparam.Proto(&BalanceId{}))

	r.Invoke(BalanceServiceChaincode_Transfer,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.Transfer(ctx, ctx.Param().(*TransferRequest))
		},
		cckit_defparam.Proto(&TransferRequest{}))

	r.Invoke(BalanceServiceChaincode_TransferBatch,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.TransferBatch(ctx, ctx.Param().(*TransferBatchRequest))
		},
		cckit_defparam.Proto(&TransferBatchRequest{}))

	return nil
}

//go:embed balance.swagger.json
var BalanceServiceSwagger []byte

// NewBalanceServiceGateway creates gateway to access chaincode method via chaincode service
func NewBalanceServiceGateway(sdk cckit_sdk.SDK, channel, chaincode string, opts ...cckit_gateway.Opt) *BalanceServiceGateway {
	return NewBalanceServiceGatewayFromInstance(
		cckit_gateway.NewChaincodeInstanceService(
			sdk,
			&cckit_gateway.ChaincodeLocator{Channel: channel, Chaincode: chaincode},
			opts...,
		))
}

func NewBalanceServiceGatewayFromInstance(chaincodeInstance cckit_gateway.ChaincodeInstance) *BalanceServiceGateway {
	return &BalanceServiceGateway{
		ChaincodeInstance: chaincodeInstance,
	}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type BalanceServiceGateway struct {
	ChaincodeInstance cckit_gateway.ChaincodeInstance
}

func (c *BalanceServiceGateway) Invoker() cckit_gateway.ChaincodeInstanceInvoker {
	return cckit_gateway.NewChaincodeInstanceServiceInvoker(c.ChaincodeInstance)
}

// ServiceDef returns service definition
func (c *BalanceServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.NewServiceDef(
		_BalanceService_serviceDesc.ServiceName,
		BalanceServiceSwagger,
		&_BalanceService_serviceDesc,
		c,
		RegisterBalanceServiceHandlerFromEndpoint,
	)
}

func (c *BalanceServiceGateway) GetBalance(ctx context.Context, in *BalanceId) (*Balance, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, BalanceServiceChaincode_GetBalance, []interface{}{in}, &Balance{}); err != nil {
		return nil, err
	} else {
		return res.(*Balance), nil
	}
}

func (c *BalanceServiceGateway) ListBalances(ctx context.Context, in *BalanceId) (*Balances, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, BalanceServiceChaincode_ListBalances, []interface{}{in}, &Balances{}); err != nil {
		return nil, err
	} else {
		return res.(*Balances), nil
	}
}

func (c *BalanceServiceGateway) Transfer(ctx context.Context, in *TransferRequest) (*TransferResponse, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, BalanceServiceChaincode_Transfer, []interface{}{in}, &TransferResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*TransferResponse), nil
	}
}

func (c *BalanceServiceGateway) TransferBatch(ctx context.Context, in *TransferBatchRequest) (*TransferBatchResponse, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Invoke(ctx, BalanceServiceChaincode_TransferBatch, []interface{}{in}, &TransferBatchResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*TransferBatchResponse), nil
	}
}
