// Gateway to network/chaincode
// Two types of gateways: 1. Gateway to all chaincodes in Network 2. Gateway to some concrete chaincode instance in some channel
syntax = "proto3";

option go_package = "github.com/hyperledger-labs/cckit/gateway";
package cckit.gateway;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "hyperledger/fabric/peer/proposal_response.proto";
import "hyperledger/fabric/peer/chaincode_event.proto";

import "mwitkow/go-proto-validators/validator.proto";

// Chaincode communication service. Allows to locate channel/chaincode.
service ChaincodeService {
    // Exec: Query or Invoke
    rpc Exec (ChaincodeExecRequest) returns (protos.Response) {
        option (google.api.http) = {
            post: "/chaincode/exec"
            body: "*"
        };
    }

    // Query chaincode on home peer. Do NOT send to orderer.
    rpc Query (ChaincodeQueryRequest) returns (protos.Response) {
        option (google.api.http) = {
            get: "/chaincode/query"
        };
    }

    // Invoke chaincode on peers, according to endorsement policy and the SEND to orderer
    rpc Invoke (ChaincodeInvokeRequest) returns (protos.Response) {
        option (google.api.http) = {
            post: "/chaincode/invoke"
            body: "*"
        };
    }

    // Chaincode events stream
    rpc EventsStream (ChaincodeEventsStreamRequest) returns (stream ChaincodeEvent) {
        option (google.api.http) = {
            get: "/chaincode/events-stream"
        };
    }

    // Chaincode events
    rpc Events (ChaincodeEventsRequest) returns (ChaincodeEvents) {
        option (google.api.http) = {
            get: "/chaincode/events"
        };
    }
}

// Chaincode events subscription service
service ChaincodeEventsService {
    // Chaincode events stream
    rpc EventsStream (ChaincodeEventsStreamRequest) returns (stream ChaincodeEvent) {
        option (google.api.http) = {
            get: "/chaincode/events-stream"
        };
    }

    // Chaincode events
    rpc Events (ChaincodeEventsRequest) returns (ChaincodeEvents) {
        option (google.api.http) = {
            get: "/chaincode/events"
        };
    }
}

// Chaincode instance communication service. Channel/chaincode already fixed.
service ChaincodeInstanceService {
    // Exec: Query or Invoke
    rpc Exec (ChaincodeInstanceExecRequest) returns (protos.Response) {
        option (google.api.http) = {
            post: "/chaincode-instance/exec"
            body: "*"
        };
    }

    // Query chaincode on home peer. Do NOT send to orderer.
    rpc Query (ChaincodeInstanceQueryRequest) returns (protos.Response) {
        option (google.api.http) = {
            get: "/chaincode-instance/query"
        };
    }
    // Invoke chaincode on peers, according to endorsement policy and the SEND to orderer
    rpc Invoke (ChaincodeInstanceInvokeRequest) returns (protos.Response) {
        option (google.api.http) = {
            post: "/chaincode-instance/invoke"
            body: "*"
        };
    }
    // Chaincode events stream
    rpc EventsStream (ChaincodeInstanceEventsStreamRequest) returns (stream ChaincodeEvent) {
        option (google.api.http) = {
            get: "/chaincode-instance/events-stream"
        };
    }

    // Chaincode events
    rpc Events (ChaincodeInstanceEventsRequest) returns (ChaincodeEvents) {
        option (google.api.http) = {
            get: "/chaincode-instance/events"
        };
    }
}

// Chaincode instance events subscription service
service ChaincodeInstanceEventsService {
    // Chaincode events stream
    rpc EventsStream (ChaincodeInstanceEventsStreamRequest) returns (stream ChaincodeEvent) {
        option (google.api.http) = {
            get: "/chaincode-instance/events-stream"
        };
    }

    // Chaincode events s
    rpc Events (ChaincodeInstanceEventsRequest) returns (ChaincodeEvents) {
        option (google.api.http) = {
            get: "/chaincode-instance/events"
        };
    }
}

// Chaincode locator - channel name and chaincode name
message ChaincodeLocator {
    // Chaincode name
    string chaincode = 1 [(validator.field) = {string_not_empty : true}];
    // Channel name
    string channel = 2 [(validator.field) = {string_not_empty : true}];
}

// Chaincode invocation input
message ChaincodeInput {
    // Input contains the arguments for invocation.
    repeated bytes args = 1;

    // TransientMap contains data (e.g. cryptographic material) that might be used
    // to implement some form of application-level confidentiality. The contents
    // of this field are supposed to always be omitted from the transaction and
    // excluded from the ledger.
    map<string, bytes> transient = 2;
}


// Chaincode invocation type
enum InvocationType {
    // Simulation
    INVOCATION_TYPE_QUERY = 0;
    // Simulation and applying to ledger
    INVOCATION_TYPE_INVOKE = 1;
}

// Chaincode execution specification
message ChaincodeExecRequest {
    ChaincodeLocator locator = 1 [(validator.field) = {msg_exists : true}];
    InvocationType type = 2;
    ChaincodeInput input = 3;
}

message ChaincodeQueryRequest {
    ChaincodeLocator locator = 1 [(validator.field) = {msg_exists : true}];
    ChaincodeInput input = 3;
}

message ChaincodeInvokeRequest {
    ChaincodeLocator locator = 1 [(validator.field) = {msg_exists : true}];
    ChaincodeInput input = 3;
}


// Block limit number for event stream subscription or event list
// Values can be negative
message BlockLimit {
    // Block number
    int64 num = 1;
}

// Chaincode events stream request
message ChaincodeEventsStreamRequest {
    ChaincodeLocator locator = 1 [(validator.field) = {msg_exists : true}];
    BlockLimit from_block = 2;
    BlockLimit to_block = 3;
    repeated string event_name = 4;
}

// Chaincode events list request
message ChaincodeEventsRequest {
    ChaincodeLocator locator = 1 [(validator.field) = {msg_exists : true}];
    BlockLimit from_block = 2;
    BlockLimit to_block = 3;
    repeated string event_name = 4;
    uint32 limit = 5;
}

message ChaincodeInstanceExecRequest {
    InvocationType type = 1;
    ChaincodeInput input = 2;
}

message ChaincodeInstanceQueryRequest {
    ChaincodeInput input = 1;
}

message ChaincodeInstanceInvokeRequest {
    ChaincodeInput input = 1;
}

message ChaincodeInstanceEventsStreamRequest {
    BlockLimit from_block = 1;
    BlockLimit to_block = 2;
    repeated string event_name = 3;
}

message ChaincodeInstanceEventsRequest {
    BlockLimit from_block = 1;
    BlockLimit to_block = 2;
    repeated string event_name = 3;
    uint32 limit = 4;
}

message ChaincodeEvents {
    ChaincodeLocator locator = 1 [(validator.field) = {msg_exists : true}];
    BlockLimit from_block = 2;
    BlockLimit to_block = 3;
    repeated ChaincodeEvent items = 4;
}

message RawJson {
    bytes value = 1;
}

message ChaincodeEvent {
    protos.ChaincodeEvent event = 1;
    uint64 block = 2;
    google.protobuf.Timestamp tx_timestamp = 3;
    RawJson payload = 4;
}


