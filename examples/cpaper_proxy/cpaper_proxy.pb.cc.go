// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: cpaper_proxy/cpaper_proxy.proto

/*
Package cpaper_proxy contains
  *   chaincode methods names {service_name}Chaincode_{method_name}
  *   chaincode interface definition {service_name}Chaincode
  *   chaincode gateway definition {service_name}}Gateway
  *   chaincode service to cckit router registration func
*/
package cpaper_proxy

import (
	context "context"
	_ "embed"
	errors "errors"

	cckit_gateway "github.com/hyperledger-labs/cckit/gateway"
	cckit_router "github.com/hyperledger-labs/cckit/router"
	cckit_defparam "github.com/hyperledger-labs/cckit/router/param/defparam"
	cckit_sdk "github.com/hyperledger-labs/cckit/sdk"
)

// CPaperProxyServiceChaincode method names
const (

	// CPaperProxyServiceChaincodeMethodPrefix allows to use multiple services with same method names in one chaincode
	CPaperProxyServiceChaincodeMethodPrefix = ""

	CPaperProxyServiceChaincode_GetFromCPaper = CPaperProxyServiceChaincodeMethodPrefix + "GetFromCPaper"
)

// CPaperProxyServiceChaincode chaincode methods interface
type CPaperProxyServiceChaincode interface {
	GetFromCPaper(cckit_router.Context, *Id) (*InfoFromCPaper, error)
}

// RegisterCPaperProxyServiceChaincode registers service methods as chaincode router handlers
func RegisterCPaperProxyServiceChaincode(r *cckit_router.Group, cc CPaperProxyServiceChaincode) error {

	r.Query(CPaperProxyServiceChaincode_GetFromCPaper,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetFromCPaper(ctx, ctx.Param().(*Id))
		},
		cckit_defparam.Proto(&Id{}))

	return nil
}

//go:embed cpaper_proxy.swagger.json
var CPaperProxyServiceSwagger []byte

// NewCPaperProxyServiceGateway creates gateway to access chaincode method via chaincode service
func NewCPaperProxyServiceGateway(sdk cckit_sdk.SDK, channel, chaincode string, opts ...cckit_gateway.Opt) *CPaperProxyServiceGateway {
	return NewCPaperProxyServiceGatewayFromInstance(
		cckit_gateway.NewChaincodeInstanceService(
			sdk,
			&cckit_gateway.ChaincodeLocator{Channel: channel, Chaincode: chaincode},
			opts...,
		))
}

func NewCPaperProxyServiceGatewayFromInstance(chaincodeInstance cckit_gateway.ChaincodeInstance) *CPaperProxyServiceGateway {
	return &CPaperProxyServiceGateway{
		ChaincodeInstance: chaincodeInstance,
	}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type CPaperProxyServiceGateway struct {
	ChaincodeInstance cckit_gateway.ChaincodeInstance
}

func (c *CPaperProxyServiceGateway) Invoker() cckit_gateway.ChaincodeInstanceInvoker {
	return cckit_gateway.NewChaincodeInstanceServiceInvoker(c.ChaincodeInstance)
}

// ServiceDef returns service definition
func (c *CPaperProxyServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.NewServiceDef(
		_CPaperProxyService_serviceDesc.ServiceName,
		CPaperProxyServiceSwagger,
		&_CPaperProxyService_serviceDesc,
		c,
		RegisterCPaperProxyServiceHandlerFromEndpoint,
	)
}

func (c *CPaperProxyServiceGateway) GetFromCPaper(ctx context.Context, in *Id) (*InfoFromCPaper, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, CPaperProxyServiceChaincode_GetFromCPaper, []interface{}{in}, &InfoFromCPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*InfoFromCPaper), nil
	}
}

// CPaperProxyServiceChaincodeResolver interface for service resolver
type (
	CPaperProxyServiceChaincodeResolver interface {
		Resolve(ctx cckit_router.Context) (CPaperProxyServiceChaincode, error)
	}

	CPaperProxyServiceChaincodeLocalResolver struct {
		service CPaperProxyServiceChaincode
	}

	CPaperProxyServiceChaincodeLocatorResolver struct {
		locatorResolver cckit_gateway.ChaincodeLocatorResolver
		service         CPaperProxyServiceChaincode
	}
)

func NewCPaperProxyServiceChaincodeLocalResolver(service CPaperProxyServiceChaincode) *CPaperProxyServiceChaincodeLocalResolver {
	return &CPaperProxyServiceChaincodeLocalResolver{
		service: service,
	}
}

func (r *CPaperProxyServiceChaincodeLocalResolver) Resolve(ctx cckit_router.Context) (CPaperProxyServiceChaincode, error) {
	if r.service == nil {
		return nil, errors.New("service not set for local chaincode resolver")
	}

	return r.service, nil
}

func NewCPaperProxyServiceChaincodeResolver(locatorResolver cckit_gateway.ChaincodeLocatorResolver) *CPaperProxyServiceChaincodeLocatorResolver {
	return &CPaperProxyServiceChaincodeLocatorResolver{
		locatorResolver: locatorResolver,
	}
}

func (r *CPaperProxyServiceChaincodeLocatorResolver) Resolve(ctx cckit_router.Context) (CPaperProxyServiceChaincode, error) {
	if r.service != nil {
		return r.service, nil
	}

	locator, err := r.locatorResolver(ctx, _CPaperProxyService_serviceDesc.ServiceName)
	if err != nil {
		return nil, err
	}

	r.service = NewCPaperProxyServiceChaincodeStubInvoker(locator)
	return r.service, nil
}

type CPaperProxyServiceChaincodeStubInvoker struct {
	Invoker cckit_gateway.ChaincodeStubInvoker
}

func NewCPaperProxyServiceChaincodeStubInvoker(locator *cckit_gateway.ChaincodeLocator) *CPaperProxyServiceChaincodeStubInvoker {
	return &CPaperProxyServiceChaincodeStubInvoker{
		Invoker: &cckit_gateway.LocatorChaincodeStubInvoker{Locator: locator},
	}
}

func (c *CPaperProxyServiceChaincodeStubInvoker) GetFromCPaper(ctx cckit_router.Context, in *Id) (*InfoFromCPaper, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), CPaperProxyServiceChaincode_GetFromCPaper, []interface{}{in}, &InfoFromCPaper{}); err != nil {
		return nil, err
	} else {
		return res.(*InfoFromCPaper), nil
	}

}
