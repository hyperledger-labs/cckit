// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: erc20_utxo/service/allowance/allowance.proto

package allowance

import (
	context "context"
	_ "github.com/mwitkow/go-proto-validators"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApproveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string   `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Symbol  string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group   []string `protobuf:"bytes,4,rep,name=group,proto3" json:"group,omitempty"`
	Amount  string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ApproveRequest) Reset() {
	*x = ApproveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRequest) ProtoMessage() {}

func (x *ApproveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRequest.ProtoReflect.Descriptor instead.
func (*ApproveRequest) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{0}
}

func (x *ApproveRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ApproveRequest) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *ApproveRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ApproveRequest) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ApproveRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type TransferFromRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Recipient string   `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Symbol    string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group     []string `protobuf:"bytes,4,rep,name=group,proto3" json:"group,omitempty"`
	Amount    string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransferFromRequest) Reset() {
	*x = TransferFromRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFromRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromRequest) ProtoMessage() {}

func (x *TransferFromRequest) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromRequest.ProtoReflect.Descriptor instead.
func (*TransferFromRequest) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{1}
}

func (x *TransferFromRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TransferFromRequest) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *TransferFromRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TransferFromRequest) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *TransferFromRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type TransferFromResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Recipient string   `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Symbol    string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group     []string `protobuf:"bytes,4,rep,name=group,proto3" json:"group,omitempty"`
	Amount    string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransferFromResponse) Reset() {
	*x = TransferFromResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFromResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromResponse) ProtoMessage() {}

func (x *TransferFromResponse) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromResponse.ProtoReflect.Descriptor instead.
func (*TransferFromResponse) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{2}
}

func (x *TransferFromResponse) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TransferFromResponse) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *TransferFromResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TransferFromResponse) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *TransferFromResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Id: Allowance identifier
type AllowanceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string   `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Symbol  string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group   []string `protobuf:"bytes,4,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *AllowanceId) Reset() {
	*x = AllowanceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowanceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowanceId) ProtoMessage() {}

func (x *AllowanceId) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowanceId.ProtoReflect.Descriptor instead.
func (*AllowanceId) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{3}
}

func (x *AllowanceId) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *AllowanceId) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *AllowanceId) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AllowanceId) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

// State: Allowance
type Allowance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string   `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Symbol  string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group   []string `protobuf:"bytes,4,rep,name=group,proto3" json:"group,omitempty"`
	Amount  string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Allowance) Reset() {
	*x = Allowance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allowance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allowance) ProtoMessage() {}

func (x *Allowance) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allowance.ProtoReflect.Descriptor instead.
func (*Allowance) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{4}
}

func (x *Allowance) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Allowance) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *Allowance) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Allowance) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Allowance) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string   `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Symbol  string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group   []string `protobuf:"bytes,4,rep,name=group,proto3" json:"group,omitempty"`
	Amount  string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{5}
}

func (x *Operation) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Operation) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *Operation) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Operation) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Operation) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// List:
type Allowances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Allowance `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *Allowances) Reset() {
	*x = Allowances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allowances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allowances) ProtoMessage() {}

func (x *Allowances) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allowances.ProtoReflect.Descriptor instead.
func (*Allowances) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{6}
}

func (x *Allowances) GetItems() []*Allowance {
	if x != nil {
		return x.Items
	}
	return nil
}

// Event: Approved event is emitted when Approve method has been invoked
type Approved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner   string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender string   `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Symbol  string   `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group   []string `protobuf:"bytes,4,rep,name=group,proto3" json:"group,omitempty"`
	Amount  string   `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Approved) Reset() {
	*x = Approved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Approved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approved) ProtoMessage() {}

func (x *Approved) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approved.ProtoReflect.Descriptor instead.
func (*Approved) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{7}
}

func (x *Approved) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Approved) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *Approved) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Approved) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *Approved) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// Event: TransferredFrom event is emitted when TransferFrom method has been invoked
type TransferredFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner     string   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Spender   string   `protobuf:"bytes,2,opt,name=spender,proto3" json:"spender,omitempty"`
	Recipient string   `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Symbol    string   `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Group     []string `protobuf:"bytes,5,rep,name=group,proto3" json:"group,omitempty"`
	Amount    string   `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TransferredFrom) Reset() {
	*x = TransferredFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferredFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferredFrom) ProtoMessage() {}

func (x *TransferredFrom) ProtoReflect() protoreflect.Message {
	mi := &file_erc20_utxo_service_allowance_allowance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferredFrom.ProtoReflect.Descriptor instead.
func (*TransferredFrom) Descriptor() ([]byte, []int) {
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP(), []int{8}
}

func (x *TransferredFrom) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TransferredFrom) GetSpender() string {
	if x != nil {
		return x.Spender
	}
	return ""
}

func (x *TransferredFrom) GetRecipient() string {
	if x != nil {
		return x.Recipient
	}
	return ""
}

func (x *TransferredFrom) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TransferredFrom) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *TransferredFrom) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

var File_erc20_utxo_service_allowance_allowance_proto protoreflect.FileDescriptor

var file_erc20_utxo_service_allowance_allowance_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x75,
	0x74, 0x78, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x01,
	0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x09,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x58, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0b,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x58, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x58, 0x01, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x0a, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2e, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xfd, 0x03, 0x0a, 0x10, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xab, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x32, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x1a, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x7b, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x7d, 0x2f, 0x7b, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x7d, 0x2f, 0x7b, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x7d, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x12, 0x8e, 0x01,
	0x0a, 0x07, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x35, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2e, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x65, 0x72, 0x63, 0x32,
	0x30, 0x5f, 0x75, 0x74, 0x78, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x12, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0xa9,
	0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x12,
	0x3a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x65, 0x72, 0x63, 0x32, 0x30,
	0x5f, 0x75, 0x74, 0x78, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x75, 0x74, 0x78,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x22, 0x18, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x63, 0x63, 0x6b, 0x69, 0x74, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x65, 0x72, 0x63, 0x32, 0x30, 0x5f, 0x75,
	0x74, 0x78, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_erc20_utxo_service_allowance_allowance_proto_rawDescOnce sync.Once
	file_erc20_utxo_service_allowance_allowance_proto_rawDescData = file_erc20_utxo_service_allowance_allowance_proto_rawDesc
)

func file_erc20_utxo_service_allowance_allowance_proto_rawDescGZIP() []byte {
	file_erc20_utxo_service_allowance_allowance_proto_rawDescOnce.Do(func() {
		file_erc20_utxo_service_allowance_allowance_proto_rawDescData = protoimpl.X.CompressGZIP(file_erc20_utxo_service_allowance_allowance_proto_rawDescData)
	})
	return file_erc20_utxo_service_allowance_allowance_proto_rawDescData
}

var file_erc20_utxo_service_allowance_allowance_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_erc20_utxo_service_allowance_allowance_proto_goTypes = []interface{}{
	(*ApproveRequest)(nil),       // 0: examples.erc20_utxo.service.allowance.ApproveRequest
	(*TransferFromRequest)(nil),  // 1: examples.erc20_utxo.service.allowance.TransferFromRequest
	(*TransferFromResponse)(nil), // 2: examples.erc20_utxo.service.allowance.TransferFromResponse
	(*AllowanceId)(nil),          // 3: examples.erc20_utxo.service.allowance.AllowanceId
	(*Allowance)(nil),            // 4: examples.erc20_utxo.service.allowance.Allowance
	(*Operation)(nil),            // 5: examples.erc20_utxo.service.allowance.Operation
	(*Allowances)(nil),           // 6: examples.erc20_utxo.service.allowance.Allowances
	(*Approved)(nil),             // 7: examples.erc20_utxo.service.allowance.Approved
	(*TransferredFrom)(nil),      // 8: examples.erc20_utxo.service.allowance.TransferredFrom
}
var file_erc20_utxo_service_allowance_allowance_proto_depIdxs = []int32{
	4, // 0: examples.erc20_utxo.service.allowance.Allowances.items:type_name -> examples.erc20_utxo.service.allowance.Allowance
	3, // 1: examples.erc20_utxo.service.allowance.AllowanceService.GetAllowance:input_type -> examples.erc20_utxo.service.allowance.AllowanceId
	0, // 2: examples.erc20_utxo.service.allowance.AllowanceService.Approve:input_type -> examples.erc20_utxo.service.allowance.ApproveRequest
	1, // 3: examples.erc20_utxo.service.allowance.AllowanceService.TransferFrom:input_type -> examples.erc20_utxo.service.allowance.TransferFromRequest
	4, // 4: examples.erc20_utxo.service.allowance.AllowanceService.GetAllowance:output_type -> examples.erc20_utxo.service.allowance.Allowance
	4, // 5: examples.erc20_utxo.service.allowance.AllowanceService.Approve:output_type -> examples.erc20_utxo.service.allowance.Allowance
	2, // 6: examples.erc20_utxo.service.allowance.AllowanceService.TransferFrom:output_type -> examples.erc20_utxo.service.allowance.TransferFromResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_erc20_utxo_service_allowance_allowance_proto_init() }
func file_erc20_utxo_service_allowance_allowance_proto_init() {
	if File_erc20_utxo_service_allowance_allowance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFromRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFromResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowanceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allowance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allowances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Approved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_erc20_utxo_service_allowance_allowance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferredFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_erc20_utxo_service_allowance_allowance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_erc20_utxo_service_allowance_allowance_proto_goTypes,
		DependencyIndexes: file_erc20_utxo_service_allowance_allowance_proto_depIdxs,
		MessageInfos:      file_erc20_utxo_service_allowance_allowance_proto_msgTypes,
	}.Build()
	File_erc20_utxo_service_allowance_allowance_proto = out.File
	file_erc20_utxo_service_allowance_allowance_proto_rawDesc = nil
	file_erc20_utxo_service_allowance_allowance_proto_goTypes = nil
	file_erc20_utxo_service_allowance_allowance_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AllowanceServiceClient is the client API for AllowanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AllowanceServiceClient interface {
	// Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfersender.
	// This is zero by default.
	GetAllowance(ctx context.Context, in *AllowanceId, opts ...grpc.CallOption) (*Allowance, error)
	// Sets amount as the allowance of spender over the caller’s tokens.
	// Emits an ApprovalEvent
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*Allowance, error)
	// Moves amount tokens from sender to recipient using the allowance mechanism.
	// Amount is then deducted from the caller’s allowance.
	// Emits TransferEvent
	TransferFrom(ctx context.Context, in *TransferFromRequest, opts ...grpc.CallOption) (*TransferFromResponse, error)
}

type allowanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllowanceServiceClient(cc grpc.ClientConnInterface) AllowanceServiceClient {
	return &allowanceServiceClient{cc}
}

func (c *allowanceServiceClient) GetAllowance(ctx context.Context, in *AllowanceId, opts ...grpc.CallOption) (*Allowance, error) {
	out := new(Allowance)
	err := c.cc.Invoke(ctx, "/examples.erc20_utxo.service.allowance.AllowanceService/GetAllowance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowanceServiceClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*Allowance, error) {
	out := new(Allowance)
	err := c.cc.Invoke(ctx, "/examples.erc20_utxo.service.allowance.AllowanceService/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allowanceServiceClient) TransferFrom(ctx context.Context, in *TransferFromRequest, opts ...grpc.CallOption) (*TransferFromResponse, error) {
	out := new(TransferFromResponse)
	err := c.cc.Invoke(ctx, "/examples.erc20_utxo.service.allowance.AllowanceService/TransferFrom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllowanceServiceServer is the server API for AllowanceService service.
type AllowanceServiceServer interface {
	// Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner through transfersender.
	// This is zero by default.
	GetAllowance(context.Context, *AllowanceId) (*Allowance, error)
	// Sets amount as the allowance of spender over the caller’s tokens.
	// Emits an ApprovalEvent
	Approve(context.Context, *ApproveRequest) (*Allowance, error)
	// Moves amount tokens from sender to recipient using the allowance mechanism.
	// Amount is then deducted from the caller’s allowance.
	// Emits TransferEvent
	TransferFrom(context.Context, *TransferFromRequest) (*TransferFromResponse, error)
}

// UnimplementedAllowanceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAllowanceServiceServer struct {
}

func (*UnimplementedAllowanceServiceServer) GetAllowance(context.Context, *AllowanceId) (*Allowance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllowance not implemented")
}
func (*UnimplementedAllowanceServiceServer) Approve(context.Context, *ApproveRequest) (*Allowance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (*UnimplementedAllowanceServiceServer) TransferFrom(context.Context, *TransferFromRequest) (*TransferFromResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFrom not implemented")
}

func RegisterAllowanceServiceServer(s *grpc.Server, srv AllowanceServiceServer) {
	s.RegisterService(&_AllowanceService_serviceDesc, srv)
}

func _AllowanceService_GetAllowance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowanceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowanceServiceServer).GetAllowance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.erc20_utxo.service.allowance.AllowanceService/GetAllowance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowanceServiceServer).GetAllowance(ctx, req.(*AllowanceId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowanceService_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowanceServiceServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.erc20_utxo.service.allowance.AllowanceService/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowanceServiceServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllowanceService_TransferFrom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllowanceServiceServer).TransferFrom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/examples.erc20_utxo.service.allowance.AllowanceService/TransferFrom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllowanceServiceServer).TransferFrom(ctx, req.(*TransferFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AllowanceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "examples.erc20_utxo.service.allowance.AllowanceService",
	HandlerType: (*AllowanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllowance",
			Handler:    _AllowanceService_GetAllowance_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _AllowanceService_Approve_Handler,
		},
		{
			MethodName: "TransferFrom",
			Handler:    _AllowanceService_TransferFrom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "erc20_utxo/service/allowance/allowance.proto",
}
