// Code generated by protoc-gen-cc-gateway. DO NOT EDIT.
// source: erc20_utxo/service/config/config.proto

/*
Package config contains
  *   chaincode methods names {service_name}Chaincode_{method_name}
  *   chaincode interface definition {service_name}Chaincode
  *   chaincode gateway definition {service_name}}Gateway
  *   chaincode service to cckit router registration func
*/
package config

import (
	context "context"
	_ "embed"
	errors "errors"

	cckit_gateway "github.com/hyperledger-labs/cckit/gateway"
	cckit_router "github.com/hyperledger-labs/cckit/router"
	cckit_defparam "github.com/hyperledger-labs/cckit/router/param/defparam"
	cckit_sdk "github.com/hyperledger-labs/cckit/sdk"
	"google.golang.org/protobuf/types/known/emptypb"
)

// ConfigServiceChaincode method names
const (

	// ConfigServiceChaincodeMethodPrefix allows to use multiple services with same method names in one chaincode
	ConfigServiceChaincodeMethodPrefix = ""

	ConfigServiceChaincode_GetName = ConfigServiceChaincodeMethodPrefix + "GetName"

	ConfigServiceChaincode_GetSymbol = ConfigServiceChaincodeMethodPrefix + "GetSymbol"

	ConfigServiceChaincode_GetDecimals = ConfigServiceChaincodeMethodPrefix + "GetDecimals"

	ConfigServiceChaincode_GetTotalSupply = ConfigServiceChaincodeMethodPrefix + "GetTotalSupply"
)

// ConfigServiceChaincode chaincode methods interface
type ConfigServiceChaincode interface {
	GetName(cckit_router.Context, *emptypb.Empty) (*NameResponse, error)

	GetSymbol(cckit_router.Context, *emptypb.Empty) (*SymbolResponse, error)

	GetDecimals(cckit_router.Context, *emptypb.Empty) (*DecimalsResponse, error)

	GetTotalSupply(cckit_router.Context, *emptypb.Empty) (*TotalSupplyResponse, error)
}

// RegisterConfigServiceChaincode registers service methods as chaincode router handlers
func RegisterConfigServiceChaincode(r *cckit_router.Group, cc ConfigServiceChaincode) error {

	r.Query(ConfigServiceChaincode_GetName,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetName(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	r.Query(ConfigServiceChaincode_GetSymbol,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetSymbol(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	r.Query(ConfigServiceChaincode_GetDecimals,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetDecimals(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	r.Query(ConfigServiceChaincode_GetTotalSupply,
		func(ctx cckit_router.Context) (interface{}, error) {
			return cc.GetTotalSupply(ctx, ctx.Param().(*emptypb.Empty))
		},
		cckit_defparam.Proto(&emptypb.Empty{}))

	return nil
}

//go:embed config.swagger.json
var ConfigServiceSwagger []byte

// NewConfigServiceGateway creates gateway to access chaincode method via chaincode service
func NewConfigServiceGateway(sdk cckit_sdk.SDK, channel, chaincode string, opts ...cckit_gateway.Opt) *ConfigServiceGateway {
	return NewConfigServiceGatewayFromInstance(
		cckit_gateway.NewChaincodeInstanceService(
			sdk,
			&cckit_gateway.ChaincodeLocator{Channel: channel, Chaincode: chaincode},
			opts...,
		))
}

func NewConfigServiceGatewayFromInstance(chaincodeInstance cckit_gateway.ChaincodeInstance) *ConfigServiceGateway {
	return &ConfigServiceGateway{
		ChaincodeInstance: chaincodeInstance,
	}
}

// gateway implementation
// gateway can be used as kind of SDK, GRPC or REST server ( via grpc-gateway or clay )
type ConfigServiceGateway struct {
	ChaincodeInstance cckit_gateway.ChaincodeInstance
}

func (c *ConfigServiceGateway) Invoker() cckit_gateway.ChaincodeInstanceInvoker {
	return cckit_gateway.NewChaincodeInstanceServiceInvoker(c.ChaincodeInstance)
}

// ServiceDef returns service definition
func (c *ConfigServiceGateway) ServiceDef() cckit_gateway.ServiceDef {
	return cckit_gateway.NewServiceDef(
		_ConfigService_serviceDesc.ServiceName,
		ConfigServiceSwagger,
		&_ConfigService_serviceDesc,
		c,
		RegisterConfigServiceHandlerFromEndpoint,
	)
}

func (c *ConfigServiceGateway) GetName(ctx context.Context, in *emptypb.Empty) (*NameResponse, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, ConfigServiceChaincode_GetName, []interface{}{in}, &NameResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*NameResponse), nil
	}
}

func (c *ConfigServiceGateway) GetSymbol(ctx context.Context, in *emptypb.Empty) (*SymbolResponse, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, ConfigServiceChaincode_GetSymbol, []interface{}{in}, &SymbolResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*SymbolResponse), nil
	}
}

func (c *ConfigServiceGateway) GetDecimals(ctx context.Context, in *emptypb.Empty) (*DecimalsResponse, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, ConfigServiceChaincode_GetDecimals, []interface{}{in}, &DecimalsResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*DecimalsResponse), nil
	}
}

func (c *ConfigServiceGateway) GetTotalSupply(ctx context.Context, in *emptypb.Empty) (*TotalSupplyResponse, error) {
	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker().Query(ctx, ConfigServiceChaincode_GetTotalSupply, []interface{}{in}, &TotalSupplyResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*TotalSupplyResponse), nil
	}
}

// ConfigServiceChaincodeResolver interface for service resolver
type (
	ConfigServiceChaincodeResolver interface {
		Resolve(ctx cckit_router.Context) (ConfigServiceChaincode, error)
	}

	ConfigServiceChaincodeLocalResolver struct {
		service ConfigServiceChaincode
	}

	ConfigServiceChaincodeLocatorResolver struct {
		locatorResolver cckit_gateway.ChaincodeLocatorResolver
		service         ConfigServiceChaincode
	}
)

func NewConfigServiceChaincodeLocalResolver(service ConfigServiceChaincode) *ConfigServiceChaincodeLocalResolver {
	return &ConfigServiceChaincodeLocalResolver{
		service: service,
	}
}

func (r *ConfigServiceChaincodeLocalResolver) Resolve(ctx cckit_router.Context) (ConfigServiceChaincode, error) {
	if r.service == nil {
		return nil, errors.New("service not set for local chaincode resolver")
	}

	return r.service, nil
}

func NewConfigServiceChaincodeResolver(locatorResolver cckit_gateway.ChaincodeLocatorResolver) *ConfigServiceChaincodeLocatorResolver {
	return &ConfigServiceChaincodeLocatorResolver{
		locatorResolver: locatorResolver,
	}
}

func (r *ConfigServiceChaincodeLocatorResolver) Resolve(ctx cckit_router.Context) (ConfigServiceChaincode, error) {
	if r.service != nil {
		return r.service, nil
	}

	locator, err := r.locatorResolver(ctx, _ConfigService_serviceDesc.ServiceName)
	if err != nil {
		return nil, err
	}

	r.service = NewConfigServiceChaincodeStubInvoker(locator)
	return r.service, nil
}

type ConfigServiceChaincodeStubInvoker struct {
	Invoker cckit_gateway.ChaincodeStubInvoker
}

func NewConfigServiceChaincodeStubInvoker(locator *cckit_gateway.ChaincodeLocator) *ConfigServiceChaincodeStubInvoker {
	return &ConfigServiceChaincodeStubInvoker{
		Invoker: &cckit_gateway.LocatorChaincodeStubInvoker{Locator: locator},
	}
}

func (c *ConfigServiceChaincodeStubInvoker) GetName(ctx cckit_router.Context, in *emptypb.Empty) (*NameResponse, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), ConfigServiceChaincode_GetName, []interface{}{in}, &NameResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*NameResponse), nil
	}

}

func (c *ConfigServiceChaincodeStubInvoker) GetSymbol(ctx cckit_router.Context, in *emptypb.Empty) (*SymbolResponse, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), ConfigServiceChaincode_GetSymbol, []interface{}{in}, &SymbolResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*SymbolResponse), nil
	}

}

func (c *ConfigServiceChaincodeStubInvoker) GetDecimals(ctx cckit_router.Context, in *emptypb.Empty) (*DecimalsResponse, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), ConfigServiceChaincode_GetDecimals, []interface{}{in}, &DecimalsResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*DecimalsResponse), nil
	}

}

func (c *ConfigServiceChaincodeStubInvoker) GetTotalSupply(ctx cckit_router.Context, in *emptypb.Empty) (*TotalSupplyResponse, error) {

	var inMsg interface{} = in
	if v, ok := inMsg.(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return nil, err
		}
	}

	if res, err := c.Invoker.Query(ctx.Stub(), ConfigServiceChaincode_GetTotalSupply, []interface{}{in}, &TotalSupplyResponse{}); err != nil {
		return nil, err
	} else {
		return res.(*TotalSupplyResponse), nil
	}

}
